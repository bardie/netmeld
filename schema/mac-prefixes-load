#!/bin/bash --

# =============================================================================
# Copyright 2017 National Technology & Engineering Solutions of Sandia, LLC
# (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# =============================================================================
# Maintained by Sandia National Laboratories <Netmeld@sandia.gov>
# =============================================================================

dbName="site";
prefixFile="/usr/share/nmap/nmap-mac-prefixes";

# Provide help menu
while getopts ":d:h" opt; do
  case $opt in
    d)
      dbName="${OPTARG}";
      ;;
    h)
      echo "Usage $0 [dh]";
      echo "  -d  Database to connect to, default $dbName";
      echo "  -h  Help";
      exit 0;
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2;
      exit 1;
      ;;
  esac;
done;

dbUser="$(printenv USER)";

echo "Processing file $prefixFile";
insertString="$(awk '
  {
    # Load the file into an associative array (i.e. a hash map)
    mac=$1;
    $1="";                  # Blank first value of line
    gsub(/^[ ]+|[ ]+$/,""); # Trim line whitespace
    rest=$0;                # Capture rest of line data
    
    # There are some prefixes that have been reassigned or subdivided.
    # Aggregate these vendor names into a single description.
    if (mac in map) {
      map[mac]=map[mac]" | "rest;
    } else {
      map[mac]=rest;
    }
  }
  END {
    # Print associative array contents in psql insert usable format
    for (val in map)
      print "($mac$"val":000000$mac$,$vendor$"map[val]"$vendor$),";
  }' < <(grep -E '^[0-9A-F]{6} .*' $prefixFile))";

# Replace trailing command with semicolon
insertString=${insertString%?};
count=$(echo "$insertString" | wc -l);
echo "Inserting $count values";
psql -d site --username=$dbUser --quiet --no-align -t <<SQL
  insert into vendor_mac_prefixes (mac_prefix, vendor_name) values
    $insertString;
SQL
